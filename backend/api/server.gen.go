// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gorilla/mux"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// CreateLandlord defines model for CreateLandlord.
type CreateLandlord struct {
	AddressLine1 string              `json:"address_line_1"`
	AddressLine2 *string             `json:"address_line_2,omitempty"`
	Country      string              `json:"country"`
	Email        openapi_types.Email `json:"email"`
	Mobile       string              `json:"mobile"`
	Name         string              `json:"name"`
	Phone        *string             `json:"phone,omitempty"`
	Postcode     string              `json:"postcode"`
	State        string              `json:"state"`
	Suburb       string              `json:"suburb"`
}

// CreateProperty defines model for CreateProperty.
type CreateProperty struct {
	AddressLine1  string             `json:"address_line_1"`
	AddressLine2  *string            `json:"address_line_2,omitempty"`
	Country       string             `json:"country"`
	LandlordId    openapi_types.UUID `json:"landlord_id"`
	ManagementFee float64            `json:"management_fee"`
	Postcode      string             `json:"postcode"`
	State         string             `json:"state"`
	Suburb        string             `json:"suburb"`
}

// CreateTenant defines model for CreateTenant.
type CreateTenant struct {
	Email             openapi_types.Email `json:"email"`
	EndDate           openapi_types.Date  `json:"end_date"`
	Mobile            string              `json:"mobile"`
	Name              string              `json:"name"`
	OriginalStartDate openapi_types.Date  `json:"original_start_date"`
	Phone             *string             `json:"phone,omitempty"`
	PropertyId        openapi_types.UUID  `json:"property_id"`
	StartDate         openapi_types.Date  `json:"start_date"`
}

// Error defines model for Error.
type Error struct {
	Code    int32  `json:"code"`
	Message string `json:"message"`
}

// Landlord defines model for Landlord.
type Landlord struct {
	AddressLine1 string              `json:"address_line_1"`
	AddressLine2 *string             `json:"address_line_2,omitempty"`
	Country      string              `json:"country"`
	CreatedAt    time.Time           `json:"created_at"`
	Email        openapi_types.Email `json:"email"`
	Id           *openapi_types.UUID `json:"id,omitempty"`
	IsArchived   *time.Time          `json:"is_archived,omitempty"`
	Mobile       string              `json:"mobile"`
	Name         string              `json:"name"`
	Phone        *string             `json:"phone,omitempty"`
	Postcode     string              `json:"postcode"`
	State        string              `json:"state"`
	Suburb       string              `json:"suburb"`
	UpdatedAt    time.Time           `json:"updated_at"`
}

// LandlordList defines model for LandlordList.
type LandlordList struct {
	Items      []Landlord        `json:"items"`
	Pagination PaginatedMetadata `json:"pagination"`
}

// PaginatedMetadata defines model for PaginatedMetadata.
type PaginatedMetadata struct {
	Count       int32 `json:"count"`
	CurrentPage int32 `json:"current_page"`
	PerPage     int32 `json:"per_page"`
	Total       int32 `json:"total"`
	TotalPages  int32 `json:"total_pages"`
}

// Property defines model for Property.
type Property struct {
	AddressLine1  string              `json:"address_line_1"`
	AddressLine2  *string             `json:"address_line_2,omitempty"`
	Country       string              `json:"country"`
	CreatedAt     time.Time           `json:"created_at"`
	Id            *openapi_types.UUID `json:"id,omitempty"`
	IsArchived    *time.Time          `json:"is_archived,omitempty"`
	LandlordId    openapi_types.UUID  `json:"landlord_id"`
	ManagementFee float64             `json:"management_fee"`
	Postcode      string              `json:"postcode"`
	State         string              `json:"state"`
	Suburb        string              `json:"suburb"`
	UpdatedAt     time.Time           `json:"updated_at"`
}

// PropertyList defines model for PropertyList.
type PropertyList struct {
	Items      []Property        `json:"items"`
	Pagination PaginatedMetadata `json:"pagination"`
}

// Tenant defines model for Tenant.
type Tenant struct {
	CreatedAt         time.Time           `json:"created_at"`
	Email             openapi_types.Email `json:"email"`
	EndDate           openapi_types.Date  `json:"end_date"`
	Id                *openapi_types.UUID `json:"id,omitempty"`
	IsArchived        *time.Time          `json:"is_archived,omitempty"`
	Mobile            string              `json:"mobile"`
	Name              string              `json:"name"`
	OriginalStartDate openapi_types.Date  `json:"original_start_date"`
	Phone             *string             `json:"phone,omitempty"`
	PropertyId        openapi_types.UUID  `json:"property_id"`
	StartDate         openapi_types.Date  `json:"start_date"`
	TerminationDate   *openapi_types.Date `json:"termination_date,omitempty"`
	TerminationReason *string             `json:"termination_reason,omitempty"`
	UpdatedAt         time.Time           `json:"updated_at"`
	VacateDate        *openapi_types.Date `json:"vacate_date,omitempty"`
}

// TenantList defines model for TenantList.
type TenantList struct {
	Items      []Tenant          `json:"items"`
	Pagination PaginatedMetadata `json:"pagination"`
}

// LandlordsListParams defines parameters for LandlordsList.
type LandlordsListParams struct {
	Page  *int32  `form:"page,omitempty" json:"page,omitempty"`
	Limit *int32  `form:"limit,omitempty" json:"limit,omitempty"`
	Name  *string `form:"name,omitempty" json:"name,omitempty"`
}

// PropertiesListParams defines parameters for PropertiesList.
type PropertiesListParams struct {
	Page    *int32  `form:"page,omitempty" json:"page,omitempty"`
	Limit   *int32  `form:"limit,omitempty" json:"limit,omitempty"`
	Address *string `form:"address,omitempty" json:"address,omitempty"`
}

// TenantsListParams defines parameters for TenantsList.
type TenantsListParams struct {
	Page  *int32  `form:"page,omitempty" json:"page,omitempty"`
	Limit *int32  `form:"limit,omitempty" json:"limit,omitempty"`
	Name  *string `form:"name,omitempty" json:"name,omitempty"`
}

// LandlordsCreateJSONRequestBody defines body for LandlordsCreate for application/json ContentType.
type LandlordsCreateJSONRequestBody = CreateLandlord

// LandlordsUpdateJSONRequestBody defines body for LandlordsUpdate for application/json ContentType.
type LandlordsUpdateJSONRequestBody = Landlord

// PropertiesCreateJSONRequestBody defines body for PropertiesCreate for application/json ContentType.
type PropertiesCreateJSONRequestBody = CreateProperty

// PropertiesUpdateJSONRequestBody defines body for PropertiesUpdate for application/json ContentType.
type PropertiesUpdateJSONRequestBody = Property

// TenantsCreateJSONRequestBody defines body for TenantsCreate for application/json ContentType.
type TenantsCreateJSONRequestBody = CreateTenant

// TenantsUpdateJSONRequestBody defines body for TenantsUpdate for application/json ContentType.
type TenantsUpdateJSONRequestBody = Tenant

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /landlords)
	LandlordsList(w http.ResponseWriter, r *http.Request, params LandlordsListParams)

	// (POST /landlords)
	LandlordsCreate(w http.ResponseWriter, r *http.Request)

	// (DELETE /landlords/{id})
	LandlordsArchive(w http.ResponseWriter, r *http.Request, id string)

	// (GET /landlords/{id})
	LandlordsGet(w http.ResponseWriter, r *http.Request, id string)

	// (PUT /landlords/{id})
	LandlordsUpdate(w http.ResponseWriter, r *http.Request, id string)

	// (GET /properties)
	PropertiesList(w http.ResponseWriter, r *http.Request, params PropertiesListParams)

	// (POST /properties)
	PropertiesCreate(w http.ResponseWriter, r *http.Request)

	// (DELETE /properties/{id})
	PropertiesArchive(w http.ResponseWriter, r *http.Request, id string)

	// (GET /properties/{id})
	PropertiesGet(w http.ResponseWriter, r *http.Request, id string)

	// (PUT /properties/{id})
	PropertiesUpdate(w http.ResponseWriter, r *http.Request, id string)

	// (GET /tenants)
	TenantsList(w http.ResponseWriter, r *http.Request, params TenantsListParams)

	// (POST /tenants)
	TenantsCreate(w http.ResponseWriter, r *http.Request)

	// (DELETE /tenants/{id})
	TenantsArchive(w http.ResponseWriter, r *http.Request, id string)

	// (GET /tenants/{id})
	TenantsGet(w http.ResponseWriter, r *http.Request, id string)

	// (PUT /tenants/{id})
	TenantsUpdate(w http.ResponseWriter, r *http.Request, id string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// LandlordsList operation middleware
func (siw *ServerInterfaceWrapper) LandlordsList(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params LandlordsListParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", false, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", false, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", false, false, "name", r.URL.Query(), &params.Name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.LandlordsList(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// LandlordsCreate operation middleware
func (siw *ServerInterfaceWrapper) LandlordsCreate(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.LandlordsCreate(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// LandlordsArchive operation middleware
func (siw *ServerInterfaceWrapper) LandlordsArchive(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", mux.Vars(r)["id"], &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.LandlordsArchive(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// LandlordsGet operation middleware
func (siw *ServerInterfaceWrapper) LandlordsGet(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", mux.Vars(r)["id"], &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.LandlordsGet(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// LandlordsUpdate operation middleware
func (siw *ServerInterfaceWrapper) LandlordsUpdate(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", mux.Vars(r)["id"], &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.LandlordsUpdate(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PropertiesList operation middleware
func (siw *ServerInterfaceWrapper) PropertiesList(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PropertiesListParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", false, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", false, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "address" -------------

	err = runtime.BindQueryParameter("form", false, false, "address", r.URL.Query(), &params.Address)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "address", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PropertiesList(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PropertiesCreate operation middleware
func (siw *ServerInterfaceWrapper) PropertiesCreate(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PropertiesCreate(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PropertiesArchive operation middleware
func (siw *ServerInterfaceWrapper) PropertiesArchive(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", mux.Vars(r)["id"], &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PropertiesArchive(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PropertiesGet operation middleware
func (siw *ServerInterfaceWrapper) PropertiesGet(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", mux.Vars(r)["id"], &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PropertiesGet(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PropertiesUpdate operation middleware
func (siw *ServerInterfaceWrapper) PropertiesUpdate(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", mux.Vars(r)["id"], &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PropertiesUpdate(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// TenantsList operation middleware
func (siw *ServerInterfaceWrapper) TenantsList(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params TenantsListParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", false, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", false, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", false, false, "name", r.URL.Query(), &params.Name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.TenantsList(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// TenantsCreate operation middleware
func (siw *ServerInterfaceWrapper) TenantsCreate(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.TenantsCreate(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// TenantsArchive operation middleware
func (siw *ServerInterfaceWrapper) TenantsArchive(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", mux.Vars(r)["id"], &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.TenantsArchive(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// TenantsGet operation middleware
func (siw *ServerInterfaceWrapper) TenantsGet(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", mux.Vars(r)["id"], &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.TenantsGet(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// TenantsUpdate operation middleware
func (siw *ServerInterfaceWrapper) TenantsUpdate(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", mux.Vars(r)["id"], &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.TenantsUpdate(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{})
}

type GorillaServerOptions struct {
	BaseURL          string
	BaseRouter       *mux.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r *mux.Router) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r *mux.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options GorillaServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = mux.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.HandleFunc(options.BaseURL+"/landlords", wrapper.LandlordsList).Methods("GET")

	r.HandleFunc(options.BaseURL+"/landlords", wrapper.LandlordsCreate).Methods("POST")

	r.HandleFunc(options.BaseURL+"/landlords/{id}", wrapper.LandlordsArchive).Methods("DELETE")

	r.HandleFunc(options.BaseURL+"/landlords/{id}", wrapper.LandlordsGet).Methods("GET")

	r.HandleFunc(options.BaseURL+"/landlords/{id}", wrapper.LandlordsUpdate).Methods("PUT")

	r.HandleFunc(options.BaseURL+"/properties", wrapper.PropertiesList).Methods("GET")

	r.HandleFunc(options.BaseURL+"/properties", wrapper.PropertiesCreate).Methods("POST")

	r.HandleFunc(options.BaseURL+"/properties/{id}", wrapper.PropertiesArchive).Methods("DELETE")

	r.HandleFunc(options.BaseURL+"/properties/{id}", wrapper.PropertiesGet).Methods("GET")

	r.HandleFunc(options.BaseURL+"/properties/{id}", wrapper.PropertiesUpdate).Methods("PUT")

	r.HandleFunc(options.BaseURL+"/tenants", wrapper.TenantsList).Methods("GET")

	r.HandleFunc(options.BaseURL+"/tenants", wrapper.TenantsCreate).Methods("POST")

	r.HandleFunc(options.BaseURL+"/tenants/{id}", wrapper.TenantsArchive).Methods("DELETE")

	r.HandleFunc(options.BaseURL+"/tenants/{id}", wrapper.TenantsGet).Methods("GET")

	r.HandleFunc(options.BaseURL+"/tenants/{id}", wrapper.TenantsUpdate).Methods("PUT")

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xbW4/ixhL+K1af8+gd2MuRVn7bk0RRpF1lpGyeViPUuAvold3t7a4mS0b896gv+AKG",
	"wcjDmI3fwH0rV331VX02PJJU5oUUIFCT5JHodAU5dR9/UkARPlLBMqmYvVIoWYBCDm6cMqZA61nGBcxe",
	"2yu4KYAkRKPiYkm2cXPKm9YpqTQC1aZ1DHLKMzuykCqnSJJwJT6cmss5z6B1F0Hz9oFiJcWREakxlax9",
	"UCPFIyNmbtS8ZWgbEwXfDFfASPLFWxSXNxNsj/c9Wm5YM2h3fOW4h9Ibcv4VUrSG+NDd+3BtXiJ0WYDN",
	"jLNGAI3hrDV+VNAl5CBwtgBoLGHSzJ17wiJh8jmoK4Spfg8XBufgxo5H6zMIKvAwVh2SAASbsXDXlfu8",
	"Rb1kjFR8yQXNZhqpwvPPOpFpAaPn4qTTwXvxrJ8VH03CtntsnFvzc1s0f1FKqsMw7nBamswFvn1T2cwF",
	"wtLDOget6RKeBmgA3W5+mzUvSd+pwzWbUTyI1SvkeStSOqC9HTEKKPtdZBuSoDLQtkzPqEpXfA3sfLOG",
	"XV5iYgrW0dV7UDqZEhdSXy3+DQtP4fQj1y0cyBHy5of/KliQhPxnUrUvk9C7TErMb8uDqFJ041xPbXIj",
	"l+KpXe79TGCfACmjSA995oxp7Nl2a4cbtZCDEXgmO6RGKVtNikARZywpQHWZjhJp1mWu21yftWLPhf6o",
	"ABpSs3TvPpsHtXr5BZudS4jumux1k81YX6T2HF1cN27bQbMPbithPgxuO9a0PnPp79ToDr1PuLGmOiYI",
	"Kg+guGyRAqo9SHvI+ZisaUoRLhQFziP9K4NuDOHTqA9+CAk5BHawi7hYSBdnjjYtSiqMPpWEGv0Bas1T",
	"67I1KO3sI9O76d3UJUcBghacJOStu2TPxJVzw2TH7O7bEpzv7PbOoN8YScquUjvX2rWK5oCgNEm+PBL4",
	"XmSuYi1opsFaSxLyzYCjfJ+vJLQf3jdntjjn7ZzxnOPzbB0QXO28nwMPNp66kEJ7kL2ZTn0fKhA8n9Oi",
	"yHjqXDn5GrK12u+c9tv53KGAgU4VLzz2yOcVRBZMoDFaUR1pk6YADNidDfj/erTES/EWEyzkQEUQxmOC",
	"dGkhUcnlh9DRnMCUf2xDfGaAxv9LtunN9L2Hr9tmBtqStT0I4eveQ9gpfBEVLKKRgL8iBVoalYKbMAcQ",
	"UWDDiOqI2mGToQv3u2uE25qsfchTaTIWCYmREQyURms01m6JGYhQRlysacZZpDcC6fdhIXMb17hv8sjZ",
	"1h7HIANfAI/g9YPvZg5p0DGIpdWKQEKLVMfbS9NJdyp512NGHA3YhzQFrSOuIyOowZVU/O/y/HfXxTYV",
	"FtgL3oQ0sDIfh8awp4v2r4AjWEewDqYdMKfA+mcR+v7nwWv/HUa33mIYKXIzvcKYzcPOZttCNWV2aym6",
	"L6f8ywRkeEz6Yhqy8cj0xjRk+Yj2uIascHUFEVk9Mr6uiGyeO4rIYUGzyYBPqsgKsTcqIy9C41jLh1rL",
	"GyT7RO2+QR05ovXHRWurjqzQenNCslt/MYwcGYXkmM69tVHo3rkeV5H+nez4DvKK9bP2Qv3G1GN4gX9c",
	"OwY0XUE47n5LcF3ZWD91FI1DQmSN657UiwGlNyoWL8DgWK2HWq1rjHqqPN+gShxh+mPCtFUhBpjenDzs",
	"0kUMITVGaThmcR/N0jYm3nCfn83190oyk9ovkd+KxMSojCRkhVjoZLJ7Nr95Vf314G6Rbe4YrImVYM39",
	"PsqUZtHPsIZMFuWvave2TSaTzM5bSY3J++n7KbE5Hyx/3LFG7d9T5bXavw7Ka7sMe9j+EwAA//8lE9Kg",
	"RD4AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
