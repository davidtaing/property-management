// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gorilla/mux"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// CreateLandlord defines model for CreateLandlord.
type CreateLandlord struct {
	AddressLine1 string              `json:"address_line_1"`
	AddressLine2 *string             `json:"address_line_2,omitempty"`
	Country      string              `json:"country"`
	Email        openapi_types.Email `json:"email"`
	Mobile       string              `json:"mobile"`
	Name         string              `json:"name"`
	Phone        *string             `json:"phone,omitempty"`
	Postcode     string              `json:"postcode"`
	State        string              `json:"state"`
	Suburb       string              `json:"suburb"`
}

// CreateProperty defines model for CreateProperty.
type CreateProperty struct {
	AddressLine1     string             `json:"address_line_1"`
	AddressLine2     *string            `json:"address_line_2,omitempty"`
	Country          string             `json:"country"`
	LandlordId       openapi_types.UUID `json:"landlord_id"`
	ManagementFee    float64            `json:"management_fee"`
	ManagementGained openapi_types.Date `json:"management_gained"`
	Postcode         string             `json:"postcode"`
	State            string             `json:"state"`
	Suburb           string             `json:"suburb"`
}

// CreateTenant defines model for CreateTenant.
type CreateTenant struct {
	Email             openapi_types.Email `json:"email"`
	EndDate           openapi_types.Date  `json:"end_date"`
	Frequency         string              `json:"frequency"`
	Mobile            string              `json:"mobile"`
	Name              string              `json:"name"`
	OriginalStartDate openapi_types.Date  `json:"original_start_date"`
	PaidTo            openapi_types.Date  `json:"paid_to"`
	Phone             *string             `json:"phone,omitempty"`
	PropertyId        openapi_types.UUID  `json:"property_id"`
	RentalAmount      float64             `json:"rental_amount"`
	StartDate         openapi_types.Date  `json:"start_date"`
}

// Error defines model for Error.
type Error struct {
	Code    int32  `json:"code"`
	Message string `json:"message"`
}

// Landlord defines model for Landlord.
type Landlord struct {
	AddressLine1 string              `json:"address_line_1"`
	AddressLine2 *string             `json:"address_line_2,omitempty"`
	Country      string              `json:"country"`
	CreatedAt    time.Time           `json:"created_at"`
	Email        openapi_types.Email `json:"email"`
	Id           *openapi_types.UUID `json:"id,omitempty"`
	IsArchived   *time.Time          `json:"is_archived,omitempty"`
	Mobile       string              `json:"mobile"`
	Name         string              `json:"name"`
	Phone        *string             `json:"phone,omitempty"`
	Postcode     string              `json:"postcode"`
	State        string              `json:"state"`
	Suburb       string              `json:"suburb"`
	UpdatedAt    time.Time           `json:"updated_at"`
}

// LandlordList defines model for LandlordList.
type LandlordList struct {
	Items      []Landlord        `json:"items"`
	Pagination PaginatedMetadata `json:"pagination"`
}

// PaginatedMetadata defines model for PaginatedMetadata.
type PaginatedMetadata struct {
	Count       int32 `json:"count"`
	CurrentPage int32 `json:"current_page"`
	PerPage     int32 `json:"per_page"`
	Total       int32 `json:"total"`
	TotalPages  int32 `json:"total_pages"`
}

// Property defines model for Property.
type Property struct {
	AddressLine1     string              `json:"address_line_1"`
	AddressLine2     *string             `json:"address_line_2,omitempty"`
	Country          string              `json:"country"`
	CreatedAt        time.Time           `json:"created_at"`
	Id               *openapi_types.UUID `json:"id,omitempty"`
	IsArchived       *time.Time          `json:"is_archived,omitempty"`
	LandlordId       openapi_types.UUID  `json:"landlord_id"`
	ManagementFee    float64             `json:"management_fee"`
	ManagementGained openapi_types.Date  `json:"management_gained"`
	ManagementLost   *openapi_types.Date `json:"management_lost,omitempty"`
	Postcode         string              `json:"postcode"`
	State            string              `json:"state"`
	Suburb           string              `json:"suburb"`
	UpdatedAt        time.Time           `json:"updated_at"`
}

// PropertyList defines model for PropertyList.
type PropertyList struct {
	Items      []Property        `json:"items"`
	Pagination PaginatedMetadata `json:"pagination"`
}

// Tenant defines model for Tenant.
type Tenant struct {
	CreatedAt         time.Time           `json:"created_at"`
	Email             openapi_types.Email `json:"email"`
	EndDate           openapi_types.Date  `json:"end_date"`
	Frequency         string              `json:"frequency"`
	Id                *openapi_types.UUID `json:"id,omitempty"`
	IsArchived        *time.Time          `json:"is_archived,omitempty"`
	Mobile            string              `json:"mobile"`
	Name              string              `json:"name"`
	OriginalStartDate openapi_types.Date  `json:"original_start_date"`
	PaidFrom          openapi_types.Date  `json:"paid_from"`
	PaidTo            openapi_types.Date  `json:"paid_to"`
	Phone             *string             `json:"phone,omitempty"`
	PropertyId        openapi_types.UUID  `json:"property_id"`
	RentalAmount      float64             `json:"rental_amount"`
	StartDate         openapi_types.Date  `json:"start_date"`
	TerminationDate   *openapi_types.Date `json:"termination_date,omitempty"`
	TerminationReason *string             `json:"termination_reason,omitempty"`
	UpdatedAt         time.Time           `json:"updated_at"`
	VacateDate        *openapi_types.Date `json:"vacate_date,omitempty"`
}

// TenantList defines model for TenantList.
type TenantList struct {
	Items      []Tenant          `json:"items"`
	Pagination PaginatedMetadata `json:"pagination"`
}

// UpdateLandlord defines model for UpdateLandlord.
type UpdateLandlord struct {
	AddressLine1 *string              `json:"address_line_1,omitempty"`
	AddressLine2 *string              `json:"address_line_2,omitempty"`
	Country      *string              `json:"country,omitempty"`
	Email        *openapi_types.Email `json:"email,omitempty"`
	IsArchived   *time.Time           `json:"is_archived"`
	Mobile       *string              `json:"mobile,omitempty"`
	Name         *string              `json:"name,omitempty"`
	Phone        *string              `json:"phone,omitempty"`
	Postcode     *string              `json:"postcode,omitempty"`
	State        *string              `json:"state,omitempty"`
	Suburb       *string              `json:"suburb,omitempty"`
}

// UpdateProperty defines model for UpdateProperty.
type UpdateProperty struct {
	AddressLine1     *string             `json:"address_line_1,omitempty"`
	AddressLine2     *string             `json:"address_line_2,omitempty"`
	Country          *string             `json:"country,omitempty"`
	IsArchived       *time.Time          `json:"is_archived"`
	ManagementFee    *float64            `json:"management_fee,omitempty"`
	ManagementGained *openapi_types.Date `json:"management_gained,omitempty"`
	ManagementLost   *openapi_types.Date `json:"management_lost"`
	Postcode         *string             `json:"postcode,omitempty"`
	State            *string             `json:"state,omitempty"`
	Suburb           *string             `json:"suburb,omitempty"`
}

// UpdateTenant defines model for UpdateTenant.
type UpdateTenant struct {
	Email             *openapi_types.Email `json:"email,omitempty"`
	EndDate           *openapi_types.Date  `json:"end_date,omitempty"`
	Frequency         *string              `json:"frequency,omitempty"`
	IsArchived        *time.Time           `json:"is_archived"`
	Mobile            *string              `json:"mobile,omitempty"`
	Name              *string              `json:"name,omitempty"`
	OriginalStartDate *openapi_types.Date  `json:"original_start_date,omitempty"`
	PaidFrom          *openapi_types.Date  `json:"paid_from,omitempty"`
	PaidTo            *openapi_types.Date  `json:"paid_to,omitempty"`
	Phone             *string              `json:"phone,omitempty"`
	RentalAmount      *float64             `json:"rental_amount,omitempty"`
	StartDate         *openapi_types.Date  `json:"start_date,omitempty"`
	TerminationDate   *openapi_types.Date  `json:"termination_date"`
	TerminationReason *string              `json:"termination_reason"`
	VacateDate        *openapi_types.Date  `json:"vacate_date"`
}

// LandlordsListParams defines parameters for LandlordsList.
type LandlordsListParams struct {
	Page         *int32  `form:"page,omitempty" json:"page,omitempty"`
	Limit        *int32  `form:"limit,omitempty" json:"limit,omitempty"`
	Name         *string `form:"name,omitempty" json:"name,omitempty"`
	ArchivedOnly *bool   `form:"archived_only,omitempty" json:"archived_only,omitempty"`
}

// PropertiesListParams defines parameters for PropertiesList.
type PropertiesListParams struct {
	Page         *int32  `form:"page,omitempty" json:"page,omitempty"`
	Limit        *int32  `form:"limit,omitempty" json:"limit,omitempty"`
	Address      *string `form:"address,omitempty" json:"address,omitempty"`
	ArchivedOnly *bool   `form:"archived_only,omitempty" json:"archived_only,omitempty"`
}

// TenantsListParams defines parameters for TenantsList.
type TenantsListParams struct {
	Page         *int32  `form:"page,omitempty" json:"page,omitempty"`
	Limit        *int32  `form:"limit,omitempty" json:"limit,omitempty"`
	Name         *string `form:"name,omitempty" json:"name,omitempty"`
	ArchivedOnly *bool   `form:"archived_only,omitempty" json:"archived_only,omitempty"`
}

// LandlordsCreateJSONRequestBody defines body for LandlordsCreate for application/json ContentType.
type LandlordsCreateJSONRequestBody = CreateLandlord

// LandlordsUpdateJSONRequestBody defines body for LandlordsUpdate for application/json ContentType.
type LandlordsUpdateJSONRequestBody = UpdateLandlord

// PropertiesCreateJSONRequestBody defines body for PropertiesCreate for application/json ContentType.
type PropertiesCreateJSONRequestBody = CreateProperty

// PropertiesUpdateJSONRequestBody defines body for PropertiesUpdate for application/json ContentType.
type PropertiesUpdateJSONRequestBody = UpdateProperty

// TenantsCreateJSONRequestBody defines body for TenantsCreate for application/json ContentType.
type TenantsCreateJSONRequestBody = CreateTenant

// TenantsUpdateJSONRequestBody defines body for TenantsUpdate for application/json ContentType.
type TenantsUpdateJSONRequestBody = UpdateTenant

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /landlords)
	LandlordsList(w http.ResponseWriter, r *http.Request, params LandlordsListParams)

	// (POST /landlords)
	LandlordsCreate(w http.ResponseWriter, r *http.Request)

	// (DELETE /landlords/{id})
	LandlordsArchive(w http.ResponseWriter, r *http.Request, id string)

	// (GET /landlords/{id})
	LandlordsGet(w http.ResponseWriter, r *http.Request, id string)

	// (PATCH /landlords/{id})
	LandlordsUpdate(w http.ResponseWriter, r *http.Request, id string)

	// (GET /properties)
	PropertiesList(w http.ResponseWriter, r *http.Request, params PropertiesListParams)

	// (POST /properties)
	PropertiesCreate(w http.ResponseWriter, r *http.Request)

	// (DELETE /properties/{id})
	PropertiesArchive(w http.ResponseWriter, r *http.Request, id string)

	// (GET /properties/{id})
	PropertiesGet(w http.ResponseWriter, r *http.Request, id string)

	// (PATCH /properties/{id})
	PropertiesUpdate(w http.ResponseWriter, r *http.Request, id string)

	// (GET /tenants)
	TenantsList(w http.ResponseWriter, r *http.Request, params TenantsListParams)

	// (POST /tenants)
	TenantsCreate(w http.ResponseWriter, r *http.Request)

	// (DELETE /tenants/{id})
	TenantsArchive(w http.ResponseWriter, r *http.Request, id string)

	// (GET /tenants/{id})
	TenantsGet(w http.ResponseWriter, r *http.Request, id string)

	// (PATCH /tenants/{id})
	TenantsUpdate(w http.ResponseWriter, r *http.Request, id string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// LandlordsList operation middleware
func (siw *ServerInterfaceWrapper) LandlordsList(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params LandlordsListParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", false, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", false, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", false, false, "name", r.URL.Query(), &params.Name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	// ------------- Optional query parameter "archived_only" -------------

	err = runtime.BindQueryParameter("form", false, false, "archived_only", r.URL.Query(), &params.ArchivedOnly)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "archived_only", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.LandlordsList(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// LandlordsCreate operation middleware
func (siw *ServerInterfaceWrapper) LandlordsCreate(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.LandlordsCreate(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// LandlordsArchive operation middleware
func (siw *ServerInterfaceWrapper) LandlordsArchive(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", mux.Vars(r)["id"], &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.LandlordsArchive(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// LandlordsGet operation middleware
func (siw *ServerInterfaceWrapper) LandlordsGet(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", mux.Vars(r)["id"], &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.LandlordsGet(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// LandlordsUpdate operation middleware
func (siw *ServerInterfaceWrapper) LandlordsUpdate(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", mux.Vars(r)["id"], &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.LandlordsUpdate(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PropertiesList operation middleware
func (siw *ServerInterfaceWrapper) PropertiesList(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PropertiesListParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", false, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", false, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "address" -------------

	err = runtime.BindQueryParameter("form", false, false, "address", r.URL.Query(), &params.Address)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "address", Err: err})
		return
	}

	// ------------- Optional query parameter "archived_only" -------------

	err = runtime.BindQueryParameter("form", false, false, "archived_only", r.URL.Query(), &params.ArchivedOnly)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "archived_only", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PropertiesList(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PropertiesCreate operation middleware
func (siw *ServerInterfaceWrapper) PropertiesCreate(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PropertiesCreate(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PropertiesArchive operation middleware
func (siw *ServerInterfaceWrapper) PropertiesArchive(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", mux.Vars(r)["id"], &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PropertiesArchive(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PropertiesGet operation middleware
func (siw *ServerInterfaceWrapper) PropertiesGet(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", mux.Vars(r)["id"], &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PropertiesGet(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PropertiesUpdate operation middleware
func (siw *ServerInterfaceWrapper) PropertiesUpdate(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", mux.Vars(r)["id"], &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PropertiesUpdate(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// TenantsList operation middleware
func (siw *ServerInterfaceWrapper) TenantsList(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params TenantsListParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", false, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", false, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", false, false, "name", r.URL.Query(), &params.Name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	// ------------- Optional query parameter "archived_only" -------------

	err = runtime.BindQueryParameter("form", false, false, "archived_only", r.URL.Query(), &params.ArchivedOnly)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "archived_only", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.TenantsList(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// TenantsCreate operation middleware
func (siw *ServerInterfaceWrapper) TenantsCreate(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.TenantsCreate(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// TenantsArchive operation middleware
func (siw *ServerInterfaceWrapper) TenantsArchive(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", mux.Vars(r)["id"], &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.TenantsArchive(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// TenantsGet operation middleware
func (siw *ServerInterfaceWrapper) TenantsGet(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", mux.Vars(r)["id"], &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.TenantsGet(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// TenantsUpdate operation middleware
func (siw *ServerInterfaceWrapper) TenantsUpdate(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", mux.Vars(r)["id"], &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.TenantsUpdate(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{})
}

type GorillaServerOptions struct {
	BaseURL          string
	BaseRouter       *mux.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r *mux.Router) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r *mux.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options GorillaServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = mux.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.HandleFunc(options.BaseURL+"/landlords", wrapper.LandlordsList).Methods("GET")

	r.HandleFunc(options.BaseURL+"/landlords", wrapper.LandlordsCreate).Methods("POST")

	r.HandleFunc(options.BaseURL+"/landlords/{id}", wrapper.LandlordsArchive).Methods("DELETE")

	r.HandleFunc(options.BaseURL+"/landlords/{id}", wrapper.LandlordsGet).Methods("GET")

	r.HandleFunc(options.BaseURL+"/landlords/{id}", wrapper.LandlordsUpdate).Methods("PATCH")

	r.HandleFunc(options.BaseURL+"/properties", wrapper.PropertiesList).Methods("GET")

	r.HandleFunc(options.BaseURL+"/properties", wrapper.PropertiesCreate).Methods("POST")

	r.HandleFunc(options.BaseURL+"/properties/{id}", wrapper.PropertiesArchive).Methods("DELETE")

	r.HandleFunc(options.BaseURL+"/properties/{id}", wrapper.PropertiesGet).Methods("GET")

	r.HandleFunc(options.BaseURL+"/properties/{id}", wrapper.PropertiesUpdate).Methods("PATCH")

	r.HandleFunc(options.BaseURL+"/tenants", wrapper.TenantsList).Methods("GET")

	r.HandleFunc(options.BaseURL+"/tenants", wrapper.TenantsCreate).Methods("POST")

	r.HandleFunc(options.BaseURL+"/tenants/{id}", wrapper.TenantsArchive).Methods("DELETE")

	r.HandleFunc(options.BaseURL+"/tenants/{id}", wrapper.TenantsGet).Methods("GET")

	r.HandleFunc(options.BaseURL+"/tenants/{id}", wrapper.TenantsUpdate).Methods("PATCH")

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
