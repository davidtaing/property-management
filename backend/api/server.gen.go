// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gorilla/mux"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Error defines model for Error.
type Error struct {
	Code    int32  `json:"code"`
	Message string `json:"message"`
}

// Landlord defines model for Landlord.
type Landlord struct {
	Email      string              `json:"email"`
	Id         *openapi_types.UUID `json:"id,omitempty"`
	IsArchived *time.Time          `json:"is_archived,omitempty"`
	Mobile     string              `json:"mobile"`
	Name       string              `json:"name"`
	Phone      *string             `json:"phone,omitempty"`
}

// LandlordList defines model for LandlordList.
type LandlordList struct {
	Items []Landlord `json:"items"`
}

// Property defines model for Property.
type Property struct {
	AddressLine1  string              `json:"address_line_1"`
	AddressLine2  *string             `json:"address_line_2,omitempty"`
	Id            *openapi_types.UUID `json:"id,omitempty"`
	IsArchived    *time.Time          `json:"is_archived,omitempty"`
	LandlordId    openapi_types.UUID  `json:"landlord_id"`
	ManagementFee float64             `json:"management_fee"`
	Postcode      string              `json:"postcode"`
	State         string              `json:"state"`
	Suburb        string              `json:"suburb"`
}

// PropertyList defines model for PropertyList.
type PropertyList struct {
	Items []Property `json:"items"`
}

// Tenant defines model for Tenant.
type Tenant struct {
	Email             string              `json:"email"`
	EndDate           openapi_types.Date  `json:"end_date"`
	Id                *openapi_types.UUID `json:"id,omitempty"`
	IsArchived        *time.Time          `json:"is_archived,omitempty"`
	Mobile            string              `json:"mobile"`
	Name              string              `json:"name"`
	OriginalStartDate openapi_types.Date  `json:"original_start_date"`
	Phone             *string             `json:"phone,omitempty"`
	PropertyId        openapi_types.UUID  `json:"property_id"`
	StartDate         openapi_types.Date  `json:"start_date"`
	TerminationDate   *openapi_types.Date `json:"termination_date,omitempty"`
	TerminationReason *string             `json:"termination_reason,omitempty"`
	VacateDate        *openapi_types.Date `json:"vacate_date,omitempty"`
}

// TenantList defines model for TenantList.
type TenantList struct {
	Items []Tenant `json:"items"`
}

// LandlordsCreateJSONRequestBody defines body for LandlordsCreate for application/json ContentType.
type LandlordsCreateJSONRequestBody = Landlord

// LandlordsUpdateJSONRequestBody defines body for LandlordsUpdate for application/json ContentType.
type LandlordsUpdateJSONRequestBody = Landlord

// PropertiesCreateJSONRequestBody defines body for PropertiesCreate for application/json ContentType.
type PropertiesCreateJSONRequestBody = Property

// PropertiesUpdateJSONRequestBody defines body for PropertiesUpdate for application/json ContentType.
type PropertiesUpdateJSONRequestBody = Property

// TenantsCreateJSONRequestBody defines body for TenantsCreate for application/json ContentType.
type TenantsCreateJSONRequestBody = Tenant

// TenantsUpdateJSONRequestBody defines body for TenantsUpdate for application/json ContentType.
type TenantsUpdateJSONRequestBody = Tenant

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /landlords)
	LandlordsList(w http.ResponseWriter, r *http.Request)

	// (POST /landlords)
	LandlordsCreate(w http.ResponseWriter, r *http.Request)

	// (DELETE /landlords/{id})
	LandlordsArchive(w http.ResponseWriter, r *http.Request, id string)

	// (GET /landlords/{id})
	LandlordsGet(w http.ResponseWriter, r *http.Request, id string)

	// (PUT /landlords/{id})
	LandlordsUpdate(w http.ResponseWriter, r *http.Request, id string)

	// (GET /properties)
	PropertiesList(w http.ResponseWriter, r *http.Request)

	// (POST /properties)
	PropertiesCreate(w http.ResponseWriter, r *http.Request)

	// (DELETE /properties/{id})
	PropertiesArchive(w http.ResponseWriter, r *http.Request, id string)

	// (GET /properties/{id})
	PropertiesGet(w http.ResponseWriter, r *http.Request, id string)

	// (PUT /properties/{id})
	PropertiesUpdate(w http.ResponseWriter, r *http.Request, id string)

	// (GET /tenants)
	TenantsList(w http.ResponseWriter, r *http.Request)

	// (POST /tenants)
	TenantsCreate(w http.ResponseWriter, r *http.Request)

	// (DELETE /tenants/{id})
	TenantsArchive(w http.ResponseWriter, r *http.Request, id string)

	// (GET /tenants/{id})
	TenantsGet(w http.ResponseWriter, r *http.Request, id string)

	// (PUT /tenants/{id})
	TenantsUpdate(w http.ResponseWriter, r *http.Request, id string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// LandlordsList operation middleware
func (siw *ServerInterfaceWrapper) LandlordsList(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.LandlordsList(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// LandlordsCreate operation middleware
func (siw *ServerInterfaceWrapper) LandlordsCreate(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.LandlordsCreate(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// LandlordsArchive operation middleware
func (siw *ServerInterfaceWrapper) LandlordsArchive(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", mux.Vars(r)["id"], &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.LandlordsArchive(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// LandlordsGet operation middleware
func (siw *ServerInterfaceWrapper) LandlordsGet(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", mux.Vars(r)["id"], &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.LandlordsGet(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// LandlordsUpdate operation middleware
func (siw *ServerInterfaceWrapper) LandlordsUpdate(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", mux.Vars(r)["id"], &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.LandlordsUpdate(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PropertiesList operation middleware
func (siw *ServerInterfaceWrapper) PropertiesList(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PropertiesList(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PropertiesCreate operation middleware
func (siw *ServerInterfaceWrapper) PropertiesCreate(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PropertiesCreate(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PropertiesArchive operation middleware
func (siw *ServerInterfaceWrapper) PropertiesArchive(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", mux.Vars(r)["id"], &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PropertiesArchive(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PropertiesGet operation middleware
func (siw *ServerInterfaceWrapper) PropertiesGet(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", mux.Vars(r)["id"], &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PropertiesGet(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PropertiesUpdate operation middleware
func (siw *ServerInterfaceWrapper) PropertiesUpdate(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", mux.Vars(r)["id"], &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PropertiesUpdate(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// TenantsList operation middleware
func (siw *ServerInterfaceWrapper) TenantsList(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.TenantsList(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// TenantsCreate operation middleware
func (siw *ServerInterfaceWrapper) TenantsCreate(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.TenantsCreate(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// TenantsArchive operation middleware
func (siw *ServerInterfaceWrapper) TenantsArchive(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", mux.Vars(r)["id"], &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.TenantsArchive(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// TenantsGet operation middleware
func (siw *ServerInterfaceWrapper) TenantsGet(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", mux.Vars(r)["id"], &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.TenantsGet(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// TenantsUpdate operation middleware
func (siw *ServerInterfaceWrapper) TenantsUpdate(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", mux.Vars(r)["id"], &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.TenantsUpdate(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{})
}

type GorillaServerOptions struct {
	BaseURL          string
	BaseRouter       *mux.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r *mux.Router) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r *mux.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options GorillaServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = mux.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.HandleFunc(options.BaseURL+"/landlords", wrapper.LandlordsList).Methods("GET")

	r.HandleFunc(options.BaseURL+"/landlords", wrapper.LandlordsCreate).Methods("POST")

	r.HandleFunc(options.BaseURL+"/landlords/{id}", wrapper.LandlordsArchive).Methods("DELETE")

	r.HandleFunc(options.BaseURL+"/landlords/{id}", wrapper.LandlordsGet).Methods("GET")

	r.HandleFunc(options.BaseURL+"/landlords/{id}", wrapper.LandlordsUpdate).Methods("PUT")

	r.HandleFunc(options.BaseURL+"/properties", wrapper.PropertiesList).Methods("GET")

	r.HandleFunc(options.BaseURL+"/properties", wrapper.PropertiesCreate).Methods("POST")

	r.HandleFunc(options.BaseURL+"/properties/{id}", wrapper.PropertiesArchive).Methods("DELETE")

	r.HandleFunc(options.BaseURL+"/properties/{id}", wrapper.PropertiesGet).Methods("GET")

	r.HandleFunc(options.BaseURL+"/properties/{id}", wrapper.PropertiesUpdate).Methods("PUT")

	r.HandleFunc(options.BaseURL+"/tenants", wrapper.TenantsList).Methods("GET")

	r.HandleFunc(options.BaseURL+"/tenants", wrapper.TenantsCreate).Methods("POST")

	r.HandleFunc(options.BaseURL+"/tenants/{id}", wrapper.TenantsArchive).Methods("DELETE")

	r.HandleFunc(options.BaseURL+"/tenants/{id}", wrapper.TenantsGet).Methods("GET")

	r.HandleFunc(options.BaseURL+"/tenants/{id}", wrapper.TenantsUpdate).Methods("PUT")

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xaXY/iNhT9K5bbx3RgZ6fSKm/bD1WVpupK3T5VI3SJL+BVYqf2DS1F/PfKdgjJEhhA",
	"wCarPA2TOL5f59zrQ1jzRGe5VqjI8njNbbLADPzHn43Rxn3Ijc7RkER/OdEC3d+ZNhkQj7lU9PaRR5xW",
	"OYZ/cY6GbyKeobUw96vLm5aMVHO+2UTc4N+FNCh4/FfYc7f+pdpMTz9hQm6vZ1Ai1UbsO4QZyLTFRsSl",
	"aDhaFFJwZxjE7ypd8ZhMgVHLY3YCJlnIJTafF0D4HckMectDmZ7KFFvdUJC138gXWp2QHe+13yQqg63M",
	"HcvUs7S0ny1JmDU/fGtwxmP+zWiHhFEJg1GV9U1lCIyB1b6Pfrc2dz4E86t9V0AIg9ZOUqlw8qY1Q40l",
	"j1+8yGmZjkm70X1QgII5ZqhoMsMma4QupmnNiCqyaWBNri1tSba3oyWgA3eKaWGmJ6KpHkj0eSGqvWq+",
	"bC3vxXSs5NdAYAWfyxH4ERUoOqdxoBITUSa6gYy2Ine9y2gj51JBOrEEhk6P61B3irZpXJ1KgzMNE5pM",
	"KiCp1WUPGQSrVavrS0iA8NRt26hTD/5QW25PeiMRNZAdxuw1CFSi/1L6uHVSzbTPpiQHvorf7LeqF7A/",
	"0Cxl4uJaorHSpZ+PH8YPYw/BHBXkksf8rb8U8Rxo4V0fbVuR/2+OPl63vS/lr4LH1UCzPh3ObZtrZUMy",
	"HsfjcCpRhIHkkOepTPzjo08lDkIyTp123o6PXKBNjMwpxPNxgczlDC2xBVhmiyRBFCgeXJDfX9GTcPZq",
	"ccGlGQ3D8n7ECebW1a+a1C/lCDmSxx8NBgiWwfygxerqSQze7yDm2uBmr3hvbmT3xMIxUIIBU/gPM2h1",
	"YRL0C6aIiiU+TYKBZeBuFyn5Qj/do9DOZRuKnegiFUxpYoUSaCw5p6kWkiiQkWZSLSGVgtmVIvi3W5jc",
	"RDWmj9ZSbJw5gSmGRnwAqe/DhPQNw0CGhMbtvObSGXZNZNuDY16O3Treolpon7f2lzs0kvObyNMVGXGw",
	"YO+TBK1l0rJCQUELbeR/lf2n+2IblAP2TDYhjaLiY9d66/ER9QvSANYBrJ05CBTHwPpnXh5Fb4PXL322",
	"6AZFenNWGNjcbTa7I1RTCLaOog/VklvLpcbXPD2TS9XXSofl0i6RN9VLuy+47quXmnYHvdQtUDbJ/qpg",
	"2mG1p4rpIjQOY6urY6vRXl8ZUz2UTANav160tkqmHVp7p5nOO190gyODZhrofLVjFPkXYIcFU3hBdnO1",
	"VHuj1zOtVL5BPKyUygzeVCZtX2PeVyTVrQ4SqUtYrDH7VXVU4rOn0ugCDA6zqauzqdZLjw2jHmqiAaZf",
	"J0xb9VAJ096JoXNOEV2gxiCEBhZf47C0iXhwPPCz+fyzTiBlP+ESU51XP+ZDwyNemJTHfEGUx6NR6tYt",
	"tKX43fjdmDuOlpbWW5bXfi9eXav9gre6tmXEy+b/AAAA//8vTxk6gTAAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
